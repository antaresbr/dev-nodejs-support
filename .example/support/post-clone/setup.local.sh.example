#!/bin/bash

echo ""
echo "---[ $(dirname "$(realpath "${SCRIPT_DIR}")") ]---"
echo "---| post-clone/$(basename "${BASH_SOURCE[0]}")"

[ -z "${WORKSPACE_BASE_LIB_SH}" ] && echo -e "post-clone/setup-local | ERROR | WORKSPACE_BASE_LIB_SH not defined" && exit 1
[ -z "${POST_CLONE_SETUP_LIB_SH}" ] && wsError "post-clone/setup-local" "POST_CLONE_SETUP_LIB_SH not defined"
[ -z "${POST_CLONE_LIB_SH}" ] && wsError "post-clone/setup-local" "POST_CLONE_LIB_SH not defined"

#---[ setup-local ]---

#-- parameters

pclLoadDefaultAndSavedParams

if [ -z "${pNodejsService}" ]
then
  echo ""
  envVarRead "NODEJS_SERVICE" "pNodejsService" "default:$(wsCoalesce "${default_pNodejsService}" "nodejs")|required" ""
fi

if [ -z "${pNpmInstall}" ]
then
  echo ""
  envVarRead "NPM_INSTALL" "pNpmInstall" "default:$(wsCoalesce "${default_pNpmInstall}" "npm install")|required" ""
fi

if [ -z "${pAppServiceName}" ]
then
  echo ""
  envVarRead "APP_SERVICE_NAME" "pAppServiceName" "default:$(wsCoalesce "${default_pAppServiceName}" "app")|required" ""
fi

if [ -z "${pAppServiceStart}" ]
then
  echo ""
  envVarRead "APP_SERVICE_START" "pAppServiceStart" "default:$(wsCoalesce "${default_pAppServiceStart}" "npm run start")|required" ""
fi

[ -z "${PC_IGNORE_CREATE_LINKS_TO_BASE_SCRIPTS}" ] || pLinksToBaseBaseScripts=no
if [ -z "${pLinksToBaseBaseScripts}" ]
then
  echo""
  envVarRead "Create links to base scripts?" "pLinksToBaseBaseScripts" "default:$(wsCoalesce "${default_pLinksToBaseBaseScripts}" "yes")|lower-case|hide-values" "y|yes|n|no"
fi

[ -z "${PC_IGNORE_GIT_REPO_EXAMPLE}" ] || pCopyGitRepoExample=no
if [ -z "${pCopyGitRepoExample}" ]
then
  echo""
  envVarRead "Copy <.git-repo> example to parent project?" "pCopyGitRepoExample" "default:$(wsCoalesce "${default_pCopyGitRepoExample}" "yes")|lower-case|hide-values" "y|yes|n|no"
fi

[ -z "${PC_IGNORE_POST_CLONE_EXAMPLE}" ] || pCopyPostCloneExample=no
if [ -z "${pCopyPostCloneExample}" ]
then
  echo""
  envVarRead "Copy <post-clone> example to parent project?" "pCopyPostCloneExample" "default:$(wsCoalesce "${default_pCopyPostCloneExample}" "yes")|lower-case|hide-values" "y|yes|n|no"
fi

[ -z "${PC_IGNORE_SAIL_EXAMPLE}" ] || pCopySailExample=no
if [ -z "${pCopySailExample}" ]
then
  echo""
  envVarRead "Copy <sail> example to parent project?" "pCopySailExample" "default:$(wsCoalesce "${default_pCopySailExample}" "yes")|lower-case|hide-values" "y|yes|n|no"
fi

echo ""
echo "---[ parameters ]---"
echo ""
echo "ENVIRONMENT : ${pEnvironment}"
echo ""
echo "NODEJS_SERVICE    : ${pNodejsService}"
echo "NPM_INSTALL       : ${pNpmInstall}"
echo "APP_SERVICE_NAME  : ${pAppServiceName}"
echo "APP_SERVICE_START : ${pAppServiceStart}"
echo ""
echo "pLinksToBaseBaseScripts : ${pLinksToBaseBaseScripts}"
echo "pCopyGitRepoExample     : ${pCopyGitRepoExample}"
echo "pCopyPostCloneExample   : ${pCopyPostCloneExample}"
echo "pCopySailExample        : ${pCopySailExample}"
echo ""

[ -n "${pConfirm}" ] || envVarRead "Confirm parameters?" "pConfirm" "default:yes|lower-case|hide-values" "y|yes|n|no"
[ "${pConfirm:0:1}" == "y" ] || exit 0

if [ ! -f "${SCRIPT_DIR}/setup.local.env" ]
then
  echo""
  envVarRead "Save post-clone params?" "pSavePostcloneParams" "default:yes|lower-case|hide-values" "y|yes|n|no"
  if [ "${pConfirm:0:1}" == "y" ]
  then
    echo "\
#!/bin/bash
pNodejsService=\"${pNodejsService}\"
pNpmInstall=\"${pNpmInstall}\"
pAppServiceName=\"${pAppServiceName}\"
pAppServiceStart=\"${pAppServiceStart}\"
pLinksToBaseBaseScripts=\"${pLinksToBaseBaseScripts}\"
pCopyGitRepoExample=\"${pCopyGitRepoExample}\"
pCopyPostCloneExample=\"${pCopyPostCloneExample}\"
pCopySailExample=\"${pCopySailExample}\"
" > "${SCRIPT_DIR}/setup.local.env"
  fi
fi

#-- actions

function doLinkToBootstrap() {
  local target=""
  target="base/lib/.bootstrap.sh" && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
}


function doEnvFiles() {
  local envFilesVars="\
NODEJS_SERVICE=${pNodejsService}
NPM_INSTALL=${pNpmInstall}
APP_SERVICE_NAME=${pAppServiceName}
APP_SERVICE_START=${pAppServiceStart}
"
  echo ".env"
  wsTemplateFile "${BASE_DIR}/.env" "${BASE_DIR}/base/.example/support/.env.example" "${envFilesVars}"
}


function doGitignore() {
  wsCopyFileIfNotExists "${BASE_DIR}/base/.example/support/.gitignore.example" "${BASE_DIR}/.gitignore" "644"
}


function doLinksToBaseScripts() {
  local target=""
  target="base/scripts/nodejs-npm-install.sh" && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
  target="base/scripts/nodejs-app-service.sh" && { [ -f "$(basename "${target}")" ] || ln -v -s "${target}"; }
}


function doCopyJsonExample() {
  local sourceDir="${BASE_DIR}/base/.example/app/src/.example"
  local targetDir="${BASE_DIR}/../src/.example/"
  wsCertifyPath "$(realpath "${sourceDir}")"
  wsCopyFileIfNotExists "${sourceDir}/BUILD-INFO.json.example" "${targetDir}" "644"
  wsCopyFileIfNotExists "${sourceDir}/ENVIRONMENT.json.example" "${targetDir}" "644"
}


function doCopyPostCloneExample() {
  wsCertifyPath "$(realpath "${BASE_DIR}/../post-clone")"
  wsCopyFileIfNotExists "${BASE_DIR}/base/.example/app/post-clone/setup.local.sh.example" "${BASE_DIR}/../post-clone/setup.local.sh" "644"
  wsCopyFileIfNotExists "${BASE_DIR}/base/post-clone/.gitignore" "${BASE_DIR}/../post-clone/.gitignore" "644"
  wsCopyFileIfNotExists "${BASE_DIR}/base/post-clone/setup.sh" "${BASE_DIR}/../post-clone/setup.sh" "755"
}


function doCopyGitRepoExample() {
  wsCertifyPath "$(realpath "${BASE_DIR}/../.git-repo")"
  wsCopyFileIfNotExists "${BASE_DIR}/base/.example/app/.git-repo/git-repo.env.sh.example" "${BASE_DIR}/../.git-repo/git-repo.env.sh" "644"
}


function doCopySailExample() {
  local target="$(realpath "${BASE_DIR}/../sail")"
  if [ -d "${target}" ]
  then
    echo "  + already exists"
    return
  fi
  wsCertifyPath "${target}"
  cp -vr "${BASE_DIR}/base/.example/app/sail" "${BASE_DIR}/../"
}

#-- template and examples

echo ""
echo "---[ .bootstrap.sh ]---"
doLinkToBootstrap

echo ""
echo "---[ env files ]---"
doEnvFiles

echo ""
echo "---[ .gitignore ]---"
doGitignore

echo ""
echo "---[ links to base scripts ]---"
if [ "${pConfirm:0:1}" != "y" ]
then
  echo "  + skiped"
else
  doLinksToBaseScripts
fi

echo ""
echo "---[ example to parent : src/json ]---"
if [ -n "${PC_IGNORE_POST_CLONE_EXAMPLE}" ]
then
  echo "  ! ignored"
else
  [ "${pCopyPostCloneExample:0:1}" == "y" ] && doCopyJsonExample
  [ "${pCopyPostCloneExample:0:1}" == "y" ] || echo "  ! skiped"
fi

echo ""
echo "---[ example to parent : post-clone ]---"
if [ -n "${PC_IGNORE_POST_CLONE_EXAMPLE}" ]
then
  echo "  ! ignored"
else
  [ "${pCopyPostCloneExample:0:1}" == "y" ] && doCopyPostCloneExample
  [ "${pCopyPostCloneExample:0:1}" == "y" ] || echo "  ! skiped"
fi

echo ""
echo "---[ example to parent : git-repo ]---"
if [ -n "${PC_IGNORE_GIT_REPO_EXAMPLE}" ]
then
  echo "  ! ignored"
else
  [ "${pCopyGitRepoExample:0:1}" == "y" ] && doCopyGitRepoExample
  [ "${pCopyGitRepoExample:0:1}" == "y" ] || echo "  ! skiped"
fi

echo ""
echo "---[ example to parent : sail ]---"
if [ -n "${PC_IGNORE_SAIL_EXAMPLE}" ]
then
  echo "  ! ignored"
else
  [ "${pCopySailExample:0:1}" == "y" ] && doCopySailExample
  [ "${pCopySailExample:0:1}" == "y" ] || echo "  ! skiped"
fi
